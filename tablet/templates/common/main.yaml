main:
  template: 
    - base
    - fill_height

  show_state: true
  show_icon: false
  show_label: true

  variables: 
    # a global function to generate similar span elements
    _unit_function: >
      [[[
        this.unitSpan = function (is_ac_on, is_heat_on, is_floor_on, temp) {
          var style = is_ac_on ? 'cold' : is_heat_on ? 'hot' : is_floor_on ? 'floor' : 'none'
          return "<span class='" + style + "'>" + (Math.round(temp) || '--') + "°</span>"
        }
      ]]]

  # use custom fields to display state for each floor
  custom_fields:
    occupy_1st: >
      [[[ 
        return (states['binary_sensor.group_sensors_1st'].state == 'on') ? '•' : ''
      ]]]

    occupy_2nd: >
      [[[
        return (states['binary_sensor.group_sensors_2nd'].state == 'on') ? '•' : ''
      ]]]

    occupy_3rd: >
      [[[
        return (states['binary_sensor.group_sensors_3rd'].state == 'on') ? '•' : ''
      ]]]

    temp_1st: >
      [[[ 
        let is_ac_on = false
        let is_heat_on = states['switch.heating_1st_entrance_hall'].state == 'on'
                      || states['switch.heating_1st_living_room'].state == 'on'
        let is_floor_on = (states['switch.pump_floor_heating_1st'].state == 'on')
        let temp = states['sensor.sonoff_living_room_temperature_temperature'].state 

        return this.unitSpan(is_ac_on, is_heat_on, is_floor_on, temp)
      ]]]

    temp_2nd: >
      [[[ 
        let is_ac_on = false
        let is_heat_on = states['climate.thermostat_2nd_cabinet'].state == 'heat'
                      || states['climate.thermostat_2nd_guest_room'].state == 'heat'
                      || states['climate.thermostat_2nd_room1'].state == 'heat'
        let is_floor_on = true
        let temp = states['sensor.temperature_2nd_average'].state

        return this.unitSpan(is_ac_on, is_heat_on, is_floor_on, temp)
      ]]]

    temp_3rd: >
      [[[ 
        let is_ac_on = states['input_boolean.bedroom_air_conditioning'].state == 'on'
        let is_heat_on = false
        let is_floor_on = (states['switch.pump_floor_heating_3rd'].state == 'on')
        let temp = states['sensor.temperature_bedroom'].state

        return this.unitSpan(is_ac_on, is_heat_on, is_floor_on, temp)
      ]]]
  
  styles:
    card: 
      - background-image: url('/local/tablet/main_card_bg.png')
      - background-size: cover
      - background-color: '#00000099'

    custom_fields:
      occupy_1st:
        - position: absolute
        - top: 198px
        - left: 34px
        - font-size: 40px
        - color: "#68BD3D"

      occupy_2nd:
        - position: absolute
        - top: 127px
        - left: 34px
        - font-size: 40px
        - color: "#68BD3D"

      occupy_3rd:
        - position: absolute
        - top: 55px
        - left: 34px
        - font-size: 40px
        - color: "#68BD3D"                

      temp_1st:
        - position: absolute
        - top: 204px
        - left: 53px

      temp_2nd:
        - position: absolute
        - top: 132px
        - left: 53px

      temp_3rd:
        - position: absolute
        - top: 61px
        - left: 53px


  # use different styles for a different states:
  # red underline - infloor heating only
  # red background — radiator heating active
  # blue — air conditioning is on
  card_mod:
    style: |
      .cold, .hot, .floor, .none {
        border-radius: 5px;
        margin-right: -1px;
        padding: 3px 9px 3px 11px;  
      }

      .cold { background-color: #4F8ABD; }
      .hot { background-color: #BD4F4F; }

      .floor:after {
        content: ""; 
        float: left; 
        background: #BD4F4F; 
        width: 100%; 
        height: 5px; 
        margin-top: 2px;
        border-radius: 3px;
        overflow: auto;
      }

      ha-card .ellipsis {
        font-size: 22pt;
        padding: 6px;
        border-radius: 5px;
      }

