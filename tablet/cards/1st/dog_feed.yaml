- type: custom:button-card
  entity: input_datetime.dog_fed_last_time

  view_layout:
    grid-area: dog

  template: 
    - base
    - height-2rows

  show_entity_picture: true
  show_state: false
  show_label: true
  show_name: false

  triggers_update: 
    - binary_sensor.aqara_fp1_living_room_presence
    - binary_sensor.tuya_living_room_motion_zaniatost
    - binary_sensor.backyard_door

  variables:
    # show 'dog is hungry' state when feed time exceeds 5 hours
    hungry_interval: 18000 

    # show 'dog wants to go out' when backyard door is closed for 5 hours
    walk_interval: 18000

    # calculate feed time by substracting input_datetime from "now" timestamp
    fed_time: |
      [[[
        let fed = new Date(entity.state).getTime()/1000
        let now = new Date().getTime()/1000
        return now - fed
      ]]]

    # calculate time since last door opening
    door_time: |
      [[[
        let door = new Date(states['binary_sensor.backyard_door'].last_changed).getTime()/1000
        let now = new Date().getTime()/1000
        return now - door
      ]]]

  # show appropriate icon for a feeding state
  entity_picture: |
    [[[
      let state = "happy";
      if (variables.fed_time > variables.hungry_interval) {
        state = "cry";
      }
      else if (variables.door_time > variables.walk_interval) {
        state = "sad";
      }
      else if (variables.fed_time < 1800) {
        state = "thumb";
      }

      return "/local/tablet/icons/dog_" + state + ".png"
    ]]]

  # show appropriate label based on conditions
  label: |
    [[[
      let h = Math.ceil((variables.fed_time / 3600) * 10) / 10
      let doorDate = new Date(states['binary_sensor.backyard_door'].last_changed)
      let doorTime = doorDate.getHours().toString().padStart(2, '0') + ':' + 
                    doorDate.getMinutes().toString().padStart(2, '0')

      if (variables.fed_time > variables.hungry_interval) {
        return Math.ceil(h) + " <span style='font-size: 16pt'>часов</span>"
      }
      else if (variables.door_time > variables.walk_interval) {
        return "🚪 " + doorTime + "&nbsp"
      }
      else if (h <= 0.5) {
        return "Ура!"
      } else if (h <= 1) {
        return Math.ceil(h) + " <span style='font-size: 16pt'>час</span>"
      } else if (h <= 4) {
        return Math.ceil(h) + " <span style='font-size: 16pt'>часа</span>"
      } else { 
        return Math.ceil(h) + " <span style='font-size: 16pt'>часов</span>"
      }s
    ]]]

  # use gradient background based on conditions
  styles:
    card:
      - background: |
          [[[
            if (variables.fed_time > variables.hungry_interval) {
              return "radial-gradient(#77000099, #33000099)"
            }
            else if (variables.door_time > variables.walk_interval) {
              return "radial-gradient(#00006699, #00003399)"
            }
            else if (variables.fed_time < 1800) {
              return "radial-gradient(#00440099, #00220099)"
            }
            else {
              return "#00000099"
            }
          ]]]
    icon: 
      - width: 52%
      - position: relative
      - left: 0%
      - top: -3%

    label:
      - font-size: 23pt
      - position: relative
      - top: -22%
